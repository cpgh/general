{
    "contents" : "## These functions are designed to optimize system performance for\n## calculations to inverse a matrix by using using system cache\n## for calculations previously performed.\n\n\n## This function uses the super assignment operator to create \n## a special matrix cached in memory that can be resused. The\n## output from this function consits of a list with the following:\n## 1. set the value of the matrix\n## 2. get the value of the matrix\n## 3. set the inverse of the matrix\n## 4. get the invest of the matirx\n\n\n\nmakeCacheMatrix <- function(x = matrix()) {    ## Name function, assign matrix as defult arg\n         \n     mt <- NULL                                ## Create mt object for this function\n     set <- function(y) {                      ## Set variable \"y\" in this function\n          x <<- y                              ## Overwrite value of \"y\" to \"x\" in global evironment\n          mt <<- NULL                          ## Create mt object in global environment\n     }\n     get <- function() x                       ## Obtain value of x from global environment\n     setinv <- function(mt.inv) mt <<- mt.inv  ## Set value for matrix inversion in global environment\n     getinv <- function() mt                   ## Get value of the matrix inversion\n     list(set = set, get = get,                ## Assign and output names for function operations\n          setinv = setinv,\n          getinv = getinv)\n     \n     \n}\n\n\n## This function inverses the value of a matrix, but first\n## checks to see if the required value exists in cache and if\n## so will use that value instaed of recomputing\n\ncacheSolve <- function(x, ...) {                ## Name function, argument x\n     \n     mt <- x$getinv()                           ## Obtain value from memory\n     if(!is.null(mt)) {                         ## Check if value from memory is NOT null\n          message(\"getting cached data\")        ## Output message and values if from cache\n          return(mt)\n     }\n     data <- x$get()                            ## Assign matrix if memory value is null\n     mt <- solve(data, ...)                     ## Matrix inversion calculation\n     x$setinv(mt)                               ## Assign matrix inversion to value as mt\n     mt                                         ## Function output\n     \n}\n\n",
    "created" : 1414118068948.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3491353545",
    "id" : "2DFCA38A",
    "lastKnownWriteTime" : 1414118078,
    "path" : "C:/github/general/week3program/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}