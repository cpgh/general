print(x)                        # since no local variable 'x' exists within function 'crazy' R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)         # local variable 'x' is declared (created) and assigned the value 42; overrides the variable 'x' in
}                                  # the containing environment
print(x)                       # since local variable 'x' now exists within the function there is no need to search the containing
}                                   # environment (global in this case)
crazy()
x <- 0
crazy()
x
crazy <- function() {
x <<- 3.14                   # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)                        # since no local variable 'x' exists within function 'crazy' R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
y <- 42; print(y)         # local variable 'x' is declared (created) and assigned the value 42; overrides the variable 'x' in
}                                  # the containing environment
print(x)
print(y)
# since local variable 'x' now exists within the function there is no need to search the containing
}                                   # environment (global in this case)
x <- 0
crazy()
x
crazy <- function() {
x <<- 3.14                   # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)                        # since no local variable 'x' exists within function 'crazy' R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)         # local variable 'x' is declared (created) and assigned the value 42; overrides the variable 'x' in
}                                  # the containing environment
print(x)
print(y)
# since local variable 'x' now exists within the function there is no need to search the containing
}                                   # environment (global in this case)
crazy()
crazy <- function() {
x <<- 3.14                   # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)                        # since no local variable 'x' exists within function 'crazy' R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)         # local variable 'x' is declared (created) and assigned the value 42; overrides the variable 'x' in
}                                  # the containing environment
print(x)
# since local variable 'x' now exists within the function there is no need to search the containing
}                                   # environment (global in this case)
crazy()
x
### Example: Caching the Mean of a Vector
# In this example we introduce the `<<-` operator which can be used to
# assign a value to an object in an environment that is different from the
# current environment. Below are two functions that are used to create a
# special object that stores a numeric vector and caches its mean.
# The first function, `makeVector` creates a special "vector", which is
# really a list containing a function to
# 1.  set the value of the vector
# 2.  get the value of the vector
# 3.  set the value of the mean
# 4.  get the value of the mean
<!-- -->
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector"
# created with the above function. However, it first checks to see if the
# mean has already been calculated. If so, it `get`s the mean from the
# cache and skips the computation. Otherwise, it calculates the mean of
# the data and sets the value of the mean in the cache via the `setmean`
# function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y <- makeVector(1:100)
cachemean(y)
m <- matrix()
m
m <- matrix()
m <- c(1,2,3,4)
m
m <- matrix(c(1,2,3,4))
m
m <- matrix(c(1,2,3,4), 2)
m <- matrix(c(1,2,3,4), 2)
m
solve(m)
t(m)
m <- matrix(c(1,2,3,4), 2)
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
m <- matrix(c(1:20), 4)
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
m <- matrix(c(1:19), 4)
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
m <- matrix(c(1:19), 4)
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
mean.r1 <- rowMean(m[1,])
mean.r1 <- rowMeans(m[1,])
m <- matrix(c(1:19), 4)     # This will repeat the number 1 to compensate for an otherwise incomplete matrix.
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
rm(list = ls())
m <- matrix(c(1:19), 4)     # This will repeat the number 1 to compensate for an otherwise incomplete matrix.
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
m <- matrix(c(1:16), 4)     # This will repeat the number 1 to compensate for an otherwise incomplete matrix.
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
mean.r1 <- rowMeans(m[1,])
m.inv <- solve(m)
rm(list = ls())
m <- matrix(c(1:16), 8)     # This will repeat the number 1 to compensate for an otherwise incomplete matrix.
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
m <- matrix(c(1:4), 2)     # This will repeat the number 1 to compensate for an otherwise incomplete matrix.
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
mean.r1 <- rowMeans(m[1,])
m.arr <- as.array(m)
mean.r1 <- rowMeans(m.arr[1,])
class(m.arr)
m.arr <- as.vectors(m)
m
m.arr <- c(m)
m.arr
mean.r1 <- rowMeans(m.arr[1,])
class(m.arr)
m.arr <- as.array(c(m))
m.arr
class(m.arr)
mean.r1 <- rowMeans(m.arr[1,])
m.arr[1,]
m.arr[1,1]
m.arr[,1]
m.arr <- array(c(1:4))
m.arr
mean.r1 <- rowMeans(m.arr[1,])
m.arr <- array(c(1:4),2)
m.arr
m.arr <- array(c(1:4),2,2)
m.arr
mean.r1 <- rowMeans(m.arr[1,])
rm(list = ls())
m <- matrix(c(1:4), 2)     # This will repeat the number 1 to compensate for an otherwise incomplete matrix.
m.trans <- t(m)
m.inv <- solve(m)
m
m.trans
m.inv
m.arr <- as.dataframe(m)
mean.r1 <- rowMeans(m.arr[1,])
m.arr <- as.data.frame(m)
m.arr
mean.r1 <- rowMeans(m.arr[1,])
mean.r1
mean.r1 <- rowMeanr(m.arr[1,])
mean.r1 <- rowMean(m.arr[1,])
mean.r1 <- rowMeans(m.arr[1,])
mean.r1
mean.r1 <- rowMeans(m.arr[,1])
mean.r1 <- rowMeans(m.arr[2,])
mean.r1
mean.r1 <- colmeans(m.arr[2,])
mean.r1 <- colMeans(m.arr[2,])
mean.r1
m.arr
mean.r1 <- colMeans(m.arr)
mean.r1
mean.r1 <- rowMeans(m.arr)
mean.r1
mean.r1 <- rowMeans(m.arr[1,])
mean.r1 <- rowMeans(m.arr[,1])
### Example: Caching the Mean of a Vector
# In this example we introduce the `<<-` operator which can be used to
# assign a value to an object in an environment that is different from the
# current environment. Below are two functions that are used to create a
# special object that stores a numeric vector and caches its mean.
# The first function, `makeVector` creates a special "vector", which is
# really a list containing a function to
# 1.  set the value of the vector
# 2.  get the value of the vector
# 3.  set the value of the mean
# 4.  get the value of the mean
<!-- -->
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector"
# created with the above function. However, it first checks to see if the
# mean has already been calculated. If so, it `get`s the mean from the
# cache and skips the computation. Otherwise, it calculates the mean of
# the data and sets the value of the mean in the cache via the `setmean`
# function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
##RUN THIS FUNCTION WITH FOLLOWING CODE:
y <- makeVector(1:100)
cachemean(y)
a <- makeVector(c(1,2,3,4))
a
a$get()
## These functions are designed to optimize system performance for
## calculations to inverse a matrix by using using system cache
## for calculations previously performed.
## This function uses the super assignment operator to create
## a special matrix cached in memory that can be resused. The
## output from this function consits of a list with the following:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the inverse of the matrix
## 4. get the invest of the matirx
makeCacheMatrix <- function(x = matrix()) {            ## Name function, assign matrix as defult arg
mt <- NULL
set <- function(y) {
x <<- y
mt <<- NULL
}
get <- function() x
setinv <- function(solve) mt <<- mt.inv
getinv <- function() mt
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mt <- x$getmean()
if(!is.null(mt)) {
message("getting cached data")
return(mt)
}
data <- x$get()
m <- mt.inv(data, ...)
x$setmean(mt)
mt
}
amatrix = makeCacheMatrix(matrixc(1234), nrow=2, ncol=2)
amatrix = makeCacheMatrix(matrix(c(1234), nrow=2, ncol=2))
amatrix$get
amatrix$get()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
## These functions are designed to optimize system performance for
## calculations to inverse a matrix by using using system cache
## for calculations previously performed.
## This function uses the super assignment operator to create
## a special matrix cached in memory that can be resused. The
## output from this function consits of a list with the following:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the inverse of the matrix
## 4. get the invest of the matirx
makeCacheMatrix <- function(x = matrix()) {            ## Name function, assign matrix as defult arg
mt <- NULL
set <- function(y) {
x <<- y
mt <<- NULL
}
get <- function() x
setinv <- function(solve) mt <<- mt.inv
getinv <- function() mt
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mt <- x$getmean()
if(!is.null(mt)) {
message("getting cached data")
return(mt)
}
data <- x$get()
mt <- mt.inv(data, ...)
x$setmean(mt)
mt
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$get()
cacheSolve(amatrix)
## These functions are designed to optimize system performance for
## calculations to inverse a matrix by using using system cache
## for calculations previously performed.
## This function uses the super assignment operator to create
## a special matrix cached in memory that can be resused. The
## output from this function consits of a list with the following:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the inverse of the matrix
## 4. get the invest of the matirx
makeCacheMatrix <- function(x = matrix()) {            ## Name function, assign matrix as defult arg
mt <- NULL
set <- function(y) {
x <<- y
mt <<- NULL
}
get <- function() x
setinv <- function(solve) mt <<- mt.inv
getinv <- function() mt
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mt <- x$getmean()
if(!is.null(mt)) {
message("getting cached data")
return(mt)
}
data <- x$get()
mt <- mt.inv(data, ...)
x$setinv(mt)
mt
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
## These functions are designed to optimize system performance for
## calculations to inverse a matrix by using using system cache
## for calculations previously performed.
## This function uses the super assignment operator to create
## a special matrix cached in memory that can be resused. The
## output from this function consits of a list with the following:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the inverse of the matrix
## 4. get the invest of the matirx
makeCacheMatrix <- function(x = matrix()) {            ## Name function, assign matrix as defult arg
mt <- NULL
set <- function(y) {
x <<- y
mt <<- NULL
}
get <- function() x
setinv <- function(solve) mt <<- mt.inv
getinv <- function() mt
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mt <- x$getinv()
if(!is.null(mt)) {
message("getting cached data")
return(mt)
}
data <- x$get()
mt <- mt.inv(data, ...)
x$setinv(mt)
mt
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
## These functions are designed to optimize system performance for
## calculations to inverse a matrix by using using system cache
## for calculations previously performed.
## This function uses the super assignment operator to create
## a special matrix cached in memory that can be resused. The
## output from this function consits of a list with the following:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the inverse of the matrix
## 4. get the invest of the matirx
makeCacheMatrix <- function(x = matrix()) {            ## Name function, assign matrix as defult arg
mt <- NULL
set <- function(y) {
x <<- y
mt <<- NULL
}
get <- function() x
setinv <- function(mt.inv) mt <<- mt.inv
getinv <- function() mt
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mt <- x$getinv()
if(!is.null(mt)) {
message("getting cached data")
return(mt)
}
data <- x$get()
mt <- solve(data, ...)
x$setinv(mt)
mt
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinvesse()
amatrix$getinverse()
amatrix$getinv()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
cls
## These functions are designed to optimize system performance for
## calculations to inverse a matrix by using using system cache
## for calculations previously performed.
## This function uses the super assignment operator to create
## a special matrix cached in memory that can be resused. The
## output from this function consits of a list with the following:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the inverse of the matrix
## 4. get the invest of the matirx
makeCacheMatrix <- function(x = matrix()) {    ## Name function, assign matrix as defult arg
mt <- NULL                                ## Create mt object for this function
set <- function(y) {                      ## Set variable "y" in this function
x <<- y                              ## Overwrite value of "y" to "x" in global evironment
mt <<- NULL                          ## Create mt object in global environment
}
get <- function() x                       ## Obtain value of x from global environment
setinv <- function(mt.inv) mt <<- mt.inv  ## Set value for matrix inversion in global environment
getinv <- function() mt                   ## Get value of the matrix inversion
list(set = set, get = get,                ## Assign and output names for function operations
setinv = setinv,
getinv = getinv)
}
## This function inverses the value of a matrix, but first
## checks to see if the required value exists in cache and if
## so will use that value instaed of recomputing
cacheSolve <- function(x, ...) {                ## Name function, argument x
mt <- x$getinv()                           ## Obtain value from memory
if(!is.null(mt)) {                         ## Check if value from memory is NOT null
message("getting cached data")        ## Output message and values if from cache
return(mt)
}
data <- x$get()                            ## Assign matrix if memory value is null
mt <- solve(data, ...)                     ## Matrix inversion calculation
x$setinv(mt)                               ## Assign matrix inversion to value as mt
mt                                         ## Function output
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
cacheSolve(amatrix)
